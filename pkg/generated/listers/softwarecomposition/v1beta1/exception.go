/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExceptionLister helps list Exceptions.
// All objects returned here must be treated as read-only.
type ExceptionLister interface {
	// List lists all Exceptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Exception, err error)
	// Exceptions returns an object that can list and get Exceptions.
	Exceptions(namespace string) ExceptionNamespaceLister
	ExceptionListerExpansion
}

// exceptionLister implements the ExceptionLister interface.
type exceptionLister struct {
	indexer cache.Indexer
}

// NewExceptionLister returns a new ExceptionLister.
func NewExceptionLister(indexer cache.Indexer) ExceptionLister {
	return &exceptionLister{indexer: indexer}
}

// List lists all Exceptions in the indexer.
func (s *exceptionLister) List(selector labels.Selector) (ret []*v1beta1.Exception, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Exception))
	})
	return ret, err
}

// Exceptions returns an object that can list and get Exceptions.
func (s *exceptionLister) Exceptions(namespace string) ExceptionNamespaceLister {
	return exceptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExceptionNamespaceLister helps list and get Exceptions.
// All objects returned here must be treated as read-only.
type ExceptionNamespaceLister interface {
	// List lists all Exceptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Exception, err error)
	// Get retrieves the Exception from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Exception, error)
	ExceptionNamespaceListerExpansion
}

// exceptionNamespaceLister implements the ExceptionNamespaceLister
// interface.
type exceptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Exceptions in the indexer for a given namespace.
func (s exceptionNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Exception, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Exception))
	})
	return ret, err
}

// Get retrieves the Exception from the indexer for a given namespace and name.
func (s exceptionNamespaceLister) Get(name string) (*v1beta1.Exception, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("exception"), name)
	}
	return obj.(*v1beta1.Exception), nil
}

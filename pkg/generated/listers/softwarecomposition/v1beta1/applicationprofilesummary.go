/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationProfileSummaryLister helps list ApplicationProfileSummaries.
// All objects returned here must be treated as read-only.
type ApplicationProfileSummaryLister interface {
	// List lists all ApplicationProfileSummaries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ApplicationProfileSummary, err error)
	// ApplicationProfileSummaries returns an object that can list and get ApplicationProfileSummaries.
	ApplicationProfileSummaries(namespace string) ApplicationProfileSummaryNamespaceLister
	ApplicationProfileSummaryListerExpansion
}

// applicationProfileSummaryLister implements the ApplicationProfileSummaryLister interface.
type applicationProfileSummaryLister struct {
	indexer cache.Indexer
}

// NewApplicationProfileSummaryLister returns a new ApplicationProfileSummaryLister.
func NewApplicationProfileSummaryLister(indexer cache.Indexer) ApplicationProfileSummaryLister {
	return &applicationProfileSummaryLister{indexer: indexer}
}

// List lists all ApplicationProfileSummaries in the indexer.
func (s *applicationProfileSummaryLister) List(selector labels.Selector) (ret []*v1beta1.ApplicationProfileSummary, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ApplicationProfileSummary))
	})
	return ret, err
}

// ApplicationProfileSummaries returns an object that can list and get ApplicationProfileSummaries.
func (s *applicationProfileSummaryLister) ApplicationProfileSummaries(namespace string) ApplicationProfileSummaryNamespaceLister {
	return applicationProfileSummaryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationProfileSummaryNamespaceLister helps list and get ApplicationProfileSummaries.
// All objects returned here must be treated as read-only.
type ApplicationProfileSummaryNamespaceLister interface {
	// List lists all ApplicationProfileSummaries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ApplicationProfileSummary, err error)
	// Get retrieves the ApplicationProfileSummary from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ApplicationProfileSummary, error)
	ApplicationProfileSummaryNamespaceListerExpansion
}

// applicationProfileSummaryNamespaceLister implements the ApplicationProfileSummaryNamespaceLister
// interface.
type applicationProfileSummaryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationProfileSummaries in the indexer for a given namespace.
func (s applicationProfileSummaryNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ApplicationProfileSummary, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ApplicationProfileSummary))
	})
	return ret, err
}

// Get retrieves the ApplicationProfileSummary from the indexer for a given namespace and name.
func (s applicationProfileSummaryNamespaceLister) Get(name string) (*v1beta1.ApplicationProfileSummary, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("applicationprofilesummary"), name)
	}
	return obj.(*v1beta1.ApplicationProfileSummary), nil
}

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ControlLister helps list Controls.
// All objects returned here must be treated as read-only.
type ControlLister interface {
	// List lists all Controls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Control, err error)
	// Controls returns an object that can list and get Controls.
	Controls(namespace string) ControlNamespaceLister
	ControlListerExpansion
}

// controlLister implements the ControlLister interface.
type controlLister struct {
	indexer cache.Indexer
}

// NewControlLister returns a new ControlLister.
func NewControlLister(indexer cache.Indexer) ControlLister {
	return &controlLister{indexer: indexer}
}

// List lists all Controls in the indexer.
func (s *controlLister) List(selector labels.Selector) (ret []*v1beta1.Control, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Control))
	})
	return ret, err
}

// Controls returns an object that can list and get Controls.
func (s *controlLister) Controls(namespace string) ControlNamespaceLister {
	return controlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ControlNamespaceLister helps list and get Controls.
// All objects returned here must be treated as read-only.
type ControlNamespaceLister interface {
	// List lists all Controls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Control, err error)
	// Get retrieves the Control from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Control, error)
	ControlNamespaceListerExpansion
}

// controlNamespaceLister implements the ControlNamespaceLister
// interface.
type controlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Controls in the indexer for a given namespace.
func (s controlNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Control, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Control))
	})
	return ret, err
}

// Get retrieves the Control from the indexer for a given namespace and name.
func (s controlNamespaceLister) Get(name string) (*v1beta1.Control, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("control"), name)
	}
	return obj.(*v1beta1.Control), nil
}
